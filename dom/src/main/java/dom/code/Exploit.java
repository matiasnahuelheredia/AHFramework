package dom.code;


import java.util.List;

import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;


import org.apache.isis.applib.DomainObjectContainer;
import org.apache.isis.applib.annotation.AutoComplete;
import org.apache.isis.applib.annotation.Hidden;
import org.apache.isis.applib.annotation.MultiLine;
import org.apache.isis.applib.annotation.Named;
import org.apache.isis.applib.annotation.ObjectType;
import org.apache.isis.applib.annotation.Optional;
import org.apache.isis.applib.filter.Filter;
import org.joda.time.DateTime;
import com.google.common.base.Objects;



@PersistenceCapable
@ObjectType("Exploit")
@AutoComplete(repository=RepoCode.class, action="autoComplete")
public class Exploit {

	private String name;
	
	private String code;
	private Product product;
	private List<Description> description;
	private DateTime date;
	private Language lang;
	
	public Language getLang() {
		return lang;
	}

	public void setLang(Language lang) {
		this.lang = lang;
	}

	private List<Properties> properties;
	private String Autor;
	public String getAutor() {
		return Autor;
	}

	public List<Properties> getProperties() {
		return properties;
	}
	@Optional
    @Persistent
	public DateTime getDate() {
		return date;
	}
	@Optional
    @Persistent
    
	public void setDate(DateTime date) {
		this.date = date;
	}

	public void setProperties(List<Properties> properties) {
		this.properties = properties;
	}
    @Hidden
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	@MultiLine
	@Named("Code Template")
	@Optional	
	public String getCode() {
		return code;
	}

	@Optional
	public Product getProduct() {
		return product;
	}

	public List<Description> getDescription() {
		return description;
	}

	public void setDescription(List<Description> description) {
		this.description = description;
	}


	@MultiLine
	 
	public String getGeneratedCode() {
		if (this.getProduct()==Product.LEONARDO)
		{
			return ServiceCodeGen.generateCodeLeonardo(this.code,this.properties,this.getLang());
		}
		else
		{
		return ServiceCodeGen.generateCode(this.code,this.properties);
		}
	}
	@MultiLine
	public void setGeneratedCode(String generatedCode) {
		
	}

	public DomainObjectContainer getContainer() {
		return container;
	}

	public void setContainer(DomainObjectContainer container) {
		this.container = container;
	}

	public static Filter<Exploit> thoseOwnedBy(final String currentUser) {
        return new Filter<Exploit>() {
            @Override
            public boolean accept(final Exploit exploit) {
                return Objects.equal("arduino", currentUser);
            }

        };
    }
	
	public static Filter<Exploit> thoseDescription(final String currentUser,final String descrip) {
        return new Filter<Exploit>() {
            @Override
            public boolean accept(final Exploit exploit) {
                return Objects.equal("arduino", currentUser)&& exploit.name.toLowerCase().contains(descrip);
            }

        };
    }

    private DomainObjectContainer container;

    public void setDomainObjectContainer(final DomainObjectContainer container) {
        this.container = container;
    }

    public String title()
    {
    	return this.name;
    }
}
